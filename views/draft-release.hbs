
<style>
  main h1 {
    text-align: center;
  }

  main h2 {
    margin: 0;
  }

  main .err {
    color: red;
    margin: 10px;
  }

  main #multi-step-form-container {
    margin-top: 1rem;
  }

  main .text-center {
    text-align: center;
  }

  main .mx-auto {
    margin-left: auto;
    margin-right: auto;
  }

  main .pl-0 {
    padding-left: 0;
  }

  main .button {
    padding: 0.7rem 1.5rem;
    border: 1px solid #7e3af2;
    background-color: #7e3af2;
    color: #fff;
    border-radius: 5px;
    cursor: pointer;
  }

  main .submit-btn {
    border: 1px solid #7e3af2;
    background-color: #7e3af2;
  }

  main .d-none {
    display: none;
  }

  main .form-step {
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 20px;
    padding-inline: 1rem;
    padding: 25px;
  }

  main .font-normal {
    font-weight: normal;
  }

  main ul.form-stepper {
    counter-reset: section;
    margin-bottom: 1rem;
  }

  main ul.form-stepper .form-stepper-circle {
    position: relative;
  }

  main ul.form-stepper .form-stepper-circle span {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translateY(-50%) translateX(-50%);
  }

  main .form-stepper-horizontal {
    position: relative;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between;
  }

  main ul.form-stepper>li:not(:last-of-type) {
    margin-bottom: 0.625rem;
    -webkit-transition: margin-bottom 0.4s;
    -o-transition: margin-bottom 0.4s;
    transition: margin-bottom 0.4s;
  }

  main .form-stepper-horizontal>li:not(:last-of-type) {
    margin-bottom: 0 !important;
  }

  main .form-stepper-horizontal li {
    position: relative;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-flex: 1;
    -ms-flex: 1;
    flex: 1;
    -webkit-box-align: start;
    -ms-flex-align: start;
    align-items: start;
    -webkit-transition: 0.5s;
    transition: 0.5s;
  }

  main .form-stepper-horizontal li:not(:last-child):after {
    position: relative;
    -webkit-box-flex: 1;
    -ms-flex: 1;
    flex: 1;
    height: 1px;
    content: "";
    top: 32%;
  }

  main .form-stepper-horizontal li:after {
    background-color: #dee2e6;
  }

  main .form-stepper-horizontal li.form-stepper-completed:after {
    background-color: #7e3af2;
  }

  main .form-stepper-horizontal li:last-child {
    flex: unset;
  }

  main ul.form-stepper li a .form-stepper-circle {
    display: inline-block;
    width: 40px;
    height: 40px;
    margin-right: 0;
    line-height: 1.7rem;
    text-align: center;
    background: rgba(0, 0, 0, 0.38);
    border-radius: 50%;
  }

  main .form-stepper .form-stepper-active .form-stepper-circle {
    background-color: #bcadd5;
    color: #fff;
  }

  main .form-stepper .form-stepper-active .label {
    color: black;
  }

  main .form-stepper .form-stepper-active .form-stepper-circle:hover {
    background-color: #bcadd5;
    color: #fff !important;
  }

  main .form-stepper .form-stepper-unfinished .form-stepper-circle {
    background-color: #f8f7ff;
  }

  main .form-stepper .form-stepper-completed .form-stepper-circle {
    background-color: #7e3af2 !important;
    color: #fff;
  }

  main .form-stepper .form-stepper-completed .label {
    color: #7e3af2 !important;
  }

  main .form-stepper .form-stepper-completed .form-stepper-circle:hover {
    background-color: #7e3af2 !important;
    color: #fff !important;
  }

  main .form-stepper .form-stepper-active span.text-muted {
    color: #fff !important;
  }

  main .form-stepper .form-stepper-completed span.text-muted {
    color: #fff !important;
  }

  main .form-stepper .label {
    font-size: 1rem;
    margin-top: 0.5rem;
  }

  .form-stepper a {
    cursor: pointer;
  }

  main input {
    padding-inline: 10px;
    height: 40px;
    width: 100%;
    font-size: 17px;
    font-family: Raleway;
    border: 1px solid #a789da;
    border-radius: 5px;
    margin-bottom: 10px;
  }

  main label {
    margin-bottom: 10px;
    font-family: sans-serif;
    font-size: 1rem;
  }

  main input.invalid {
    background-color: #ae87f2;
  }

  main select {
    margin-bottom: 10px;
    font-size: 0.9rem;
    padding: 2px 5px;
  }

  main canvas {
    margin: 11px;
    height: 150px;
    width: 172px;
    border-style: solid;
    border-width: 1px;
    border-color: black;
  }
  .imgNote{
    display: flex;
  }
  .noteToUser{
    padding: 10%;
    text-align: center;
    color: #be5959;
  }
  main #myInput {
    background-image: url('/css/searchicon.png');
    background-position: 10px 10px;
    background-repeat: no-repeat;
    width: 100%;
    font-size: 16px;
    padding: 12px 20px 12px 40px;
    border: 1px solid #ddd;
    margin-bottom: 12px;
  }

  main .table {
    border-collapse: collapse;
    width: 100%;
    border: 1px solid #ddd;
    font-size: 18px;
  }

  main .table th,
  #myTable td {
    text-align: left;
    padding: 12px;
    text-align: center;
  }

  main .table tr {
    border-bottom: 1px solid #ddd;

  }

  main .table tr.header,
  .table tr:hover {
    background-color: #f1f1f1;
  }

  main td {
    padding: 8px 16px;
    border: 1px solid #ccc;
    text-align: center;
  }

  main .ActionDiv {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .content {
    position: absolute;
    top: 49%;
    left: 45%;
    transform: translate(-50%, -50%);
    width: 98%;
    height: 90%;
    text-align: center;
    background-color: rgba(249, 250, 251, var(--bg-opacity));
    box-sizing: border-box;
    padding: 10px;
    z-index: 100;
    display: none;
  }

  @media only screen and (min-width: 1000px) {
    main .container {
      padding-inline: 10px;

      display: table;
      table-layout: fixed;
      width: 100%;
    }

    .content {
      position: absolute;
      top: 49%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 60%;
      height: 90%;
      text-align: center;
      background-color: rgba(249, 250, 251, var(--bg-opacity));
      box-sizing: border-box;
      padding: 10px;
      z-index: 100;
      display: none;
      /*to hide popup initially*/
    }
    main .item {
      /* float:left; */
      display: table-cell;
      padding-inline: 10px;
    }
  }

  main .avatar {
    vertical-align: middle;
    width: 50px;
    height: 50px;
    border-radius: 50%;
  }

  main .column {
    float: left;
    width: 50%;
    padding: 5px;
  }

  /* Clearfix (clear floats) */
  main .row::after {
    content: "";
    clear: both;
    display: table;
  }

  select {
    width: 185px;
  }

  .inputwrap {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .inputwrap label {
    width: 30%;
  }



  .close-btn {
    position: absolute;
    right: 20px;
    top: 15px;
    background-color: #7e3af2;
    color: white;
    border-radius: 10%;
    padding: 4 21px;
  }

  .errorShow{
    color: red;
  }
  .belowLine{
    border :none
  }
  #step-4  input,#step-4 select{
    background-color: rgb(203, 203, 203);
    color:white;
    height: 30px;
  }
  #step-4 label{
    font-size: 13px;
  }
  .selectionInput{
    display: flex;
    justify-content: space-between;
  }
  .selectionInput input{
    padding-inline: 10px;
    height: 40px;
    font-size: 17px;
    width: 70%;
    font-family: Raleway;
    border: 1px solid #a789da;
    border-radius: 5px;
    margin-bottom: 13px;
    margin-top: 5px;
  }
  .selectionInput select{
    padding-inline: 10px;
    height: 30px;
    font-size: 17px;
    width: 63%;
    font-family: Raleway;
    border: 1px solid #a789da;
    border-radius: 5px;
    margin-top: 20px;
  }
#storesIcon.grid-container {
  display: grid;
  column-gap: 10px;
  row-gap: 10px;
  grid-template-columns: auto auto auto auto auto auto auto;
  padding: 10px;
}

#storesIcon.grid-container .grid-item {
  background-color: rgba(255, 255, 255, 0.8);
  padding: 20px;
  font-size: 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
}
.store-image{
    width: 50px;
    height: 50px;
}
.store-input{
  height :15px;
  margin-left: 10px;
}
.pointer{
  cursor:pointer;
}
.loader {
  border: 7px solid #f3f3f3;
  border-radius: 50%;
  border-top: 7px solid #7e3af2;
  width: 41px;
  height: 41px;
  -webkit-animation: spin 2s linear infinite; /* Safari */
  animation: spin 2s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

<main class="h-full pb-16 overflow-y-auto">
    <div class="loader" id="load"></div>
    <div class="container px-6 mx-auto grid">
        <!-- multistep form -->
        <div>
            <div id="multi-step-form-container">
                <!-- Form Steps / Progress Bar -->
                <ul class="form-stepper form-stepper-horizontal text-center
                    mx-auto pl-0">
                    <!-- Step 1 -->
                    <li class="form-stepper-active text-center form-stepper-list
                        " step="1">
                        <a class="mx-2 pointer" onclick="navigateToFormStep(1)">
                            <span class="form-stepper-circle">
                                <span>1</span>
                            </span>
                            <div class="text-lg font-semibold text-gray-600
                                dark:text-gray-300 py-2 ">Release</div>
                        </a>
                    </li>
                    <!-- Step 2 -->
                    <li class="form-stepper-unfinished text-center
                        form-stepper-list" step="2">
                        <a id="clickToStep2" class="mx-2 pointer"
                            onclick="navigateToFormStep(2)">
                            <span class="form-stepper-circle text-muted">
                                <span>2</span>
                            </span>
                            <div class="text-lg font-semibold text-gray-600
                                dark:text-gray-300 py-2 text-muted">Tracks</div>
                        </a>
                    </li>
                    <!-- Step 3 -->
                    <li class="form-stepper-unfinished text-center
                        form-stepper-list" step="3">
                        <a id="clickToStep3" class="mx-2 pointer"
                            onclick="navigateToFormStep(3)">
                            <span class="form-stepper-circle text-muted">
                                <span>3</span>
                            </span>
                            <div class="text-lg font-semibold text-gray-600
                                dark:text-gray-300 py-2 text-muted">Store</div>
                        </a>
                    </li>
                    <!-- Step 4 -->
                    <li class="form-stepper-unfinished text-center
                        form-stepper-list" step="4">
                        <a id="clickToStep4" class="mx-2 pointer"
                            onclick="navigateToFormStep(4)">
                            <span class="form-stepper-circle text-muted">
                                <span>4</span>
                            </span>
                            <div class="text-lg font-semibold text-gray-600
                                dark:text-gray-300 py-2 text-muted">Preview</div>
                        </a>
                    </li>
                </ul>

                <!-- Step Wise Form Content -->
                <!-- Step 1 Content -->
                <section id="step-1" class="form-step text-xs font-semibold
                    tracking-wide text-left text-gray-500 uppercase border-b
                    dark:border-gray-700 bg-gray-50 dark:text-gray-400
                    dark:bg-gray-800">
                    <h4
                        style="font-size:
                        20px;text-align:center;margin-top:10px;margin-bottom:30px;">
                        &#127911; Release
                    </h4>
                    {{!-- <div
                        style="display:none;justify-content:center;margin-bottom:10px;vertical-align:center;"
                        id="load1">
                        <b>loading Data...</b>
                    </div> --}}
                    <!-- Step 1 input fields -->
                    <h1 id="errorShow"></h1>
                    <div class="mt-3">
                        <div class="container">
                            <div class="item ">

                                <p style="width: 195px;">
                                    Upload Album Thumbnail:
                                </p>
                                <div class="imgNote">
                                    <img id="draftimage" style="display:none">
                                    <canvas id="canv1"></canvas>
                                    <div class="noteToUser">Note :<br> Image
                                        must be less then or <br> equal to 10mb</div>
                                </div>
                                <p id="imgError" style="color: red;"></p>
                                <input required autocomplete="on"
                                    style="border:none;width: 260px;"
                                    type="file" multiple="false"
                                    accept=".jpg,.jpeg"
                                    id="albumImage" name="imgFile"
                                    onchange="upload()">
                            </div>
                            <div class="item">
                                <label for="">Name</label>
                                <input required autocomplete="on"
                                    placeholder="ABC Track" type="" name="title"
                                    id="title" oninput="this.className= ''">
                                <label>Version/Subtitle </label><input required
                                    autocomplete="on"
                                    placeholder="Version/Subtitle"
                                    type="version_subtitle"
                                    name="version" id="version"
                                    oninput="this.className= ''">
                                <label>Primary Artist </label><input required
                                    autocomplete="on" placeholder="" type=""
                                    name="primary_artist" id="primary_artist"
                                    oninput="this.className= ''">
                                <p>
                                </div>
                            </div>
                            <div class="container">
                                <div class="text-xs font-semibold tracking-wide
                                    text-left text-gray-500 uppercase border-b
                                    dark:border-gray-700 bg-gray-50
                                    dark:text-gray-400 dark:bg-gray-800
                                    belowLine ">
                                    <div class="selectionInput">
                                        <label required style="margin-right:
                                            42px;" for="pet-select">Genre
                                        </label>
                                        <select required name="genre"
                                            id="genre">
                                        </select>
                                    </div>
                                    <div class="selectionInput">
                                        <label for="pet-select"
                                            style="margin-right: 23px;">SubGenre
                                        </label>
                                        <select required name="subgenre"
                                            id="subgenre">
                                        </select>
                                    </div>
                                    <div class="selectionInput">
                                        <label for="pet-select">Lable Name
                                        </label>
                                        <select name="lable_name"
                                            id="lable_name">
                                        </select>
                                    </div>
                                    <div class="selectionInput">
                                        <label for="pet-select"
                                            style="margin-right: 35px;">Format
                                        </label>
                                        <select name="format" id="format">
                                           <option value="">--Choose Format--</option>
                                            <option value="dog">Single</option>
                                            <option value="cat">Album</option>
                                        </select>
                                    </div>
                                    <div class="selectionInput">
                                        <label for="pet-select">Production Year
                                        </label>
                                        <select name="production_year"
                                            id="production_year">
                                           <option value="">--Year--</option>
                                            <option value="2023">2023</option>
                                            <option value="2022">2022</option>
                                            <option value="2019">2019</option>
                                            <option value="2019">2019</option>
                                            <option value="2017">2017</option>
                                            <option value="2016">2016</option>
                                        </select>
                                    </div>
                                    <label>Actor </label><input
                                        autocomplete="on" style="margin-bottom:
                                        29px;" placeholder="Featuring" type=""
                                        name="actor" id="actor"
                                        oninput="this.className= ''">
                                </div>
                                <div class="item ">
                                    <label>Producer Catalogue Number </label>
                                    <input autocomplete="on"
                                        placeholder="Producer Catalogue Number"
                                        type="" id="producer_catalogue_number"
                                        name="producer_catalogue_number"
                                        oninput="this.className= ''">
                                    <label>Phisical/Original release date
                                    </label><input id="datepicker"
                                        type="date" name="physical_release_date"
                                        oninput="this.className= ''">
                                    <label>Line1&#8471; </label><input
                                        autocomplete="on" placeholder="Line"
                                        type="" name="line1" id="line1"
                                        oninput="this.className= ''">
                                    <label>Line2&#169; </label><input
                                        autocomplete="on" placeholder="Line"
                                        type="" name="line2" id="line2"
                                        oninput="this.className= ''">
                                    <label>UPC/EAN </label><input
                                        autocomplete="on" placeholder="UPC/EAN"
                                        type="" name="upc" id="upc"
                                        oninput="this.className= ''">

                                </div>

                            </div>

                        </div>
                        <div class="mt-3" style="display: flex;
                            justify-content:end">
                            <button class="button btn-navigate-form-step"
                                type="button" onclick="clickedNext()" id="next-1"
                                step_number="2">Next</button>
                        </div>
                    </section>

                    <!-- Step 2 Content, default hidden on page load. -->
                    <section id="step-2" class="form-step d-none">
                        <h4 class="text-lg font-semibold text-gray-600
                            dark:text-gray-300"
                            style="font-size: 20px;text-align:center;margin-top:
                            21px;">
                            &#127911; Upload Assets
                        </h4>
                        <!-- Step 2 input fields -->
                        <h1 id="errorShow2" style="color:red"></h1>
                        <div class="mt-3">
                            <div>
                                <button @click="openModal"
                                    onclick="updateSaveSongFunction()"
                                    style="width: 158px;"
                                    class="px-4 py-2 text-sm font-medium
                                    leading-5 text-white transition-colors
                                    duration-150 bg-purple-600 border
                                    border-transparent rounded-lg
                                    active:bg-purple-600 hover:bg-purple-700
                                    focus:outline-none
                                    focus:shadow-outline-purple">
                                    Add Track +
                                </button>
                            </div>
                        </div>
                        {{!-- table --}}
                        <div class="container grid px-6 mx-auto">
                            <div class="w-full mb-8 overflow-hidden rounded-lg
                                shadow-xs">
                                <div class="w-full overflow-x-auto">
                                    <table id="myTable" class="table"
                                        style="margin:5 0px">
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="mt-3" style="display: flex;
                            justify-content: space-between;">
                            <button class="button btn-navigate-form-step"
                                onclick="clickedPrev()" type="button"
                                step_number="1">Prev</button>
                            <button class="button btn-navigate-form-step"
                                type="button" id="next-2"
                                onclick="clickedNext()" step_number="3">Next</button>
                        </div>
                    </section>
                    <!-- Step 3 Content, default hidden on page load. -->
                    <section id="step-3" class="form-step d-none">
                        <h4 class="text-lg font-semibold text-gray-600
                            dark:text-gray-300"
                            style="font-size: 20px;text-align:center;margin-top:
                            21px;">
                            Select Companies To Store
                        </h4>
                        <!-- Step 4 input fields -->
                        <input  autocomplete="on" type="button" onclick='selects()' style="width: 110px;background:#7e3af2;color:white;"
                         value="Select All" />
                        <div class="grid-container" id="storesIcon">

                        </div>
                        <div class="mt-3" style="display: flex;
                            justify-content: space-between;">
                            <button class="button btn-navigate-form-step"
                                onclick="clickedPrev()" type="button"
                                step_number="2">Prev</button>
                            <button class="button btn-navigate-form-step"
                                type="button" onclick="clickedNext()" id="next-3"
                                step_number="4">Preview</button>
                        </div>

                    </section>
                    <!-- Step 4 Content, default hidden on page load. -->
                    <section id="step-4" class="form-step d-none text-xs
                        font-semibold tracking-wide text-left text-gray-500
                        border-b dark:border-gray-700 bg-gray-50
                        dark:text-gray-400 dark:bg-gray-800">
                        <h4 style="font-size:
                            20px;text-align:center;margin-top:10px;margin-bottom:30px;">
                            &#127911; Release
                        </h4>
                        <!-- Step 1 data fields -->
                        <div class="mt-3" id="previewData">
                        </div>
                        <h4 class="text-lg font-semibold text-gray-600
                            dark:text-gray-300"
                            style="font-size: 20px;text-align:center;margin-top:
                            21px;">
                            &#127911; Tracks
                        </h4>
                        <div class="container grid px-6 mx-auto
                            dark:border-gray-700 bg-gray-50 dark:text-gray-400
                            dark:bg-gray-800">
                            <div class="w-full mb-8 overflow-hidden rounded-lg
                                shadow-xs">
                                <div class="w-full overflow-x-auto">
                                    <table class="w-full whitespace-no-wrap">
                                        <thead>
                                            <tr class="header text-xs
                                                font-semibold tracking-wide
                                                text-gray-500 uppercase border-b
                                                dark:border-gray-700 bg-gray-50
                                                dark:text-gray-400
                                                dark:bg-gray-800">
                                                <th class="px-4 py-3">Id</th>
                                                <th class="px-4 py-3">Writer</th>
                                                <th class="px-4 py-3">Language</th>
                                                <th class="px-4 py-3">File Name</th>
                                            </tr>
                                        </thead>
                                        <tbody id="previewTableRows"
                                            class="bg-white divide-y
                                            dark:divide-gray-700
                                            dark:bg-gray-800">
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3" style="display: flex;
                            justify-content: space-between;">
                            <button class="button btn-navigate-form-step"
                                type="button" step_number="3">Edit Forms</button>
                            <button class="button btn-navigate-form-step"
                                type="button" onclick="saveCompletedAlbum()"
                                step_number="5">Submit</button>
                        </div>
                    </section>
                </div>
            </div>
        </div>

    </main>

    {{!-- Model for Uploading Assets --}}
    <style>
  #myInput {
    background-image: url('/css/searchicon.png');
    background-position: 10px 10px;
    background-repeat: no-repeat;
    width: 100%;
    font-size: 16px;
    padding: 12px 20px 12px 40px;
    border: 1px solid #ddd;
    margin-bottom: 12px;
  }

  .container2 {
    margin-top: 100px;
    position: relative;
    max-height: 600px;
    width: 100%;
    align-items: center;
    display: flex;
    justify-content: center;
    background-color: #fcfcfc;
  }

  .card {
    border-radius: 10px;
    box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.3);
    width: 100%;
    height: 100%;
    background-color: #ffffff;
    padding: 10px 30px 40px;
  }

  .card h3 {
    font-size: 22px;
    font-weight: 600;

  }

  .drop_box {
    margin: 10px 0;
    padding: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    border: 3px dotted #a3a3a3;
    border-radius: 5px;
  }

  .drop_box h4 {
    font-size: 16px;
    font-weight: 400;
    color: #2e2e2e;
  }

  .drop_box p {
    margin-top: 10px;
    margin-bottom: 20px;
    font-size: 12px;
    color: #a3a3a3;
  }

  .btn {
    text-decoration: none;
    background-color: #005af0;
    color: #ffffff;
    padding: 10px 20px;
    border: none;
    outline: none;
    transition: 0.3s;
  }

  .btn:hover {
    text-decoration: none;
    background-color: #ffffff;
    color: #005af0;
    padding: 10px 20px;
    border: none;
    outline: 1px solid #010101;
  }

  .form input {
    margin: 10px 0;
    width: 100%;
    background-color: #e2e2e2;
    border: none;
    outline: none;
    padding: 12px 20px;
    border-radius: 4px;
  }

  .scrolable {
    overflow-y: scroll;
  }

  .above {
    margin-bottom: 160px;
  }
</style>
    <div x-show="isModalOpen" x-transition:enter="transition ease-out duration-150" x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-150"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        class="fixed inset-0 z-30 flex items-end bg-black bg-opacity-50
        sm:items-center sm:justify-center">
        <!-- Modal -->
        <div x-show="isModalOpen" x-transition:enter="transition ease-out duration-150"
            x-transition:enter-start="opacity-0 transform translate-y-1/2"
            x-transition:enter-end="opacity-100"
            x-transition:leave="transition ease-in duration-150"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0 transform translate-y-1/2"
            @click.away="closeModal" @keydown.escape="closeModal"
            class="w-full px-6 py-4 overflow-hidden bg-white rounded-t-lg
            dark:bg-gray-800 sm:rounded-lg sm:m-4 sm:max-w-xl"
            role="dialog" id="modal">
            <!-- Remove header if you don't want a close icon. Use modal body to place modal tile. -->
            <header class="flex justify-end">
                <button
                    class="inline-flex items-center justify-center w-6 h-6
                    text-gray-400 transition-colors duration-150 rounded
                    dark:hover:text-gray-200 hover: hover:text-gray-700"
                    aria-label="close" @click="closeModal">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"
                        role="img" aria-hidden="true">
                        <path
                            d="M4.293 4.293a1 1 0 011.414 0L10
                            8.586l4.293-4.293a1 1 0 111.414 1.414L11.414
                            10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293
                            4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1
                            0 010-1.414z"
                            clip-rule="evenodd" fill-rule="evenodd"></path>
                    </svg>
                </button>
            </header>
            <!-- Modal body -->
            <div class="mt-4 mb-6 scrolable">
                <!-- Modal title -->
                <p class="above font-semibold text-gray-700 dark:text-gray-300
                    my-6 text-xl font-semibold">
                    Add Track Details
                </p>
                <!-- Modal description -->
                <div class="container2">
                    <div class="card">
                        <label class="block text-sm">
                            <span class="text-gray-700 dark:text-gray-400 my-6">Writer</span>
                            <input autocomplete="on" name="writer"
                                id="songWriter"
                                class="block w-full mt-1 text-sm
                                dark:border-gray-600 dark:bg-gray-700
                                focus:border-purple-400 focus:outline-none
                                focus:shadow-outline-purple dark:text-gray-300
                                dark:focus:shadow-outline-gray form-input"
                                placeholder="Karan Aujila" required />
                        </label>
                        <label class="block text-sm">
                            <span class="text-gray-700 dark:text-gray-400 my-6">
                                Composer </span>
                            <input autocomplete="on" name="composer"
                                id="songComposer"
                                class="block w-full mt-1 text-sm
                                dark:border-gray-600 dark:bg-gray-700
                                focus:border-purple-400 focus:outline-none
                                focus:shadow-outline-purple dark:text-gray-300
                                dark:focus:shadow-outline-gray form-input"
                                placeholder="Rehan Records" required />
                        </label>
                        <label class="block text-sm">
                            <span class="text-gray-700 dark:text-gray-400 my-6">
                                Music Director </span>
                            <input autocomplete="on" name="director"
                                id="songDirector"
                                class="block w-full mt-1 text-sm
                                dark:border-gray-600 dark:bg-gray-700
                                focus:border-purple-400 focus:outline-none
                                focus:shadow-outline-purple dark:text-gray-300
                                dark:focus:shadow-outline-gray form-input"
                                placeholder="Sandeep Rehan" required />
                        </label>
                        <label class="block text-sm">
                            <span class="text-gray-700 dark:text-gray-400 my-6">
                                Producer </span>
                            <input autocomplete="on" name="producer"
                                id="songProducer"
                                class="block w-full mt-1 text-sm
                                dark:border-gray-600 dark:bg-gray-700
                                focus:border-purple-400 focus:outline-none
                                focus:shadow-outline-purple dark:text-gray-300
                                dark:focus:shadow-outline-gray form-input"
                                placeholder="Musical Doctor" required />
                        </label>
                        <label class="block text-sm">
                            <span class="text-gray-700 dark:text-gray-400 my-6">
                                ISRC </span>
                            <input autocomplete="on" name="isrc"
                                id="songISRC"
                                class="block w-full mt-1 text-sm
                                dark:border-gray-600 dark:bg-gray-700
                                focus:border-purple-400 focus:outline-none
                                focus:shadow-outline-purple dark:text-gray-300
                                dark:focus:shadow-outline-gray form-input"
                                placeholder="ixbt-axbx" />
                        </label>
                        <label class="block text-sm">
                            <span class="text-gray-700 dark:text-gray-400 my-6">
                                Parental Advisory </span>
                            <input autocomplete="on" name="parent"
                                id="songParent"
                                class="block w-full mt-1 text-sm
                                dark:border-gray-600 dark:bg-gray-700
                                focus:border-purple-400 focus:outline-none
                                focus:shadow-outline-purple dark:text-gray-300
                                dark:focus:shadow-outline-gray form-input"
                                placeholder="T-Series" required />
                        </label>
                        <label class="block text-sm">
                            <span class="text-gray-700 dark:text-gray-400 my-6">
                                Track Language </span>
                            <input autocomplete="on" name="language"
                                id="songLanguage"
                                class="block w-full mt-1 text-sm
                                dark:border-gray-600 dark:bg-gray-700
                                focus:border-purple-400 focus:outline-none
                                focus:shadow-outline-purple dark:text-gray-300
                                dark:focus:shadow-outline-gray form-input"
                                placeholder="Punjabi" required />
                        </label>
                        <label class="block text-sm">
                            <span class="text-gray-700 dark:text-gray-400 my-6">
                                Add Track Lyrics </span>
                            <input autocomplete="on" name="lyrics"
                                id="songLyrics"
                                class="block w-full mt-1 text-sm
                                dark:border-gray-600 dark:bg-gray-700
                                focus:border-purple-400 focus:outline-none
                                focus:shadow-outline-purple dark:text-gray-300
                                dark:focus:shadow-outline-gray form-input"
                                placeholder="Hukam" required />
                        </label>
                        <label class="block text-sm">
                            <span class="text-gray-700 dark:text-gray-400 my-6">
                                Tiktok Preview </span>
                            <input autocomplete="on" name="tiktok"
                                id="songTiktok"
                                class="block w-full mt-1 text-sm
                                dark:border-gray-600 dark:bg-gray-700
                                focus:border-purple-400 focus:outline-none
                                focus:shadow-outline-purple dark:text-gray-300
                                dark:focus:shadow-outline-gray form-input"
                                placeholder="15 sec" required />
                        </label>
                        <label class="text-gray-700 dark:text-gray-400">Upload
                            Track File</label>
                        <div class="drop_box">
                            <header>
                                <h4>Select File here</h4>
                            </header>
                            <p>Files Supported: .wav, .flac</p>
                                Sample Rate 44.1K Hz
                                Below 90mb
                            <input autocomplete="on" name="filePath" type="file"
                                class="form-control" hidden
                                accept=".mp3,.wav,.flac" id="songFile"
                                style="display:none;">
                            <button class="btn" type="button">Choose File</button>
                        </div>
                        <div class="recent-file" id="updatedSongFile"></div>
                    </div>
                </div>
            </div>
            <div style="display:flex;justify-content:space-between">
                <button @click="closeModal"
                    class="w-full px-5 py-3 text-sm font-medium leading-5
                    text-white text-gray-700 transition-colors duration-150
                    border border-gray-300 rounded-lg dark:text-gray-400 sm:px-4
                    sm:py-2 sm:w-auto active:bg-transparent
                    hover:border-gray-500 focus:border-gray-500
                    active:text-gray-500 focus:outline-none
                    focus:shadow-outline-gray">
                    Cancel
                </button>
                <button @click="closeModal"
                    id="saveSongButton"
                    class="w-full px-5 py-3 text-sm font-medium leading-5
                    text-white transition-colors duration-150 bg-purple-600
                    border border-transparent rounded-lg sm:w-auto sm:px-4
                    sm:py-2 active:bg-purple-600 hover:bg-purple-700
                    focus:outline-none focus:shadow-outline-purple">
                    Save Track
                </button>
            </div>
        </div>
    </div>
    <script
        src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
    <script
        src="https://www.dukelearntoprogram.com/course1/common/js/image/SimpleImage.js"></script>
    <script>
  var songn = 2;
  var id = 1;
  var isAlbumSaved = false
  var isSongsDataSaved = false
  let songsArray = []
  let stores = []
  let savedAlbum = {}
  let albumDataSaved 
  let prevBtnClicked = false;
  let nextBtnClicked = false;
  let sizeLimitExceed = false
  let genre = []
  let labelArray = []


  function clickedPrev(){
    prevBtnClicked = true
    nextBtnClicked = false
  }
  function clickedNext(){
    prevBtnClicked = false
    nextBtnClicked = true
  }
  
  // Add Song Model Functions
  const dropArea = document.querySelector(".drop_box")
  const dropArea2 = document.querySelector(".recent-file"),
  button = dropArea.querySelector("button"),
  dragText = dropArea.querySelector("header"),
  input = dropArea.querySelector("input");
  let file;
  var filename;
  // when clicked add song then the model save function will create new object
  function updateSaveSongFunction(){
    document.getElementById('saveSongButton').onclick = addSongInArray;
    clearForm()
  }
  function clearForm(){
    document.getElementById('songWriter').value = ""
    document.getElementById('songComposer').value = ""
    document.getElementById('songDirector').value = ""
    document.getElementById('songProducer').value = ""
    document.getElementById('songISRC').value = ""
    document.getElementById('songParent').value = ""
    document.getElementById('songLanguage').value =""
    document.getElementById('songLyrics').value = ""
    document.getElementById('songTiktok').value = ""
    document.getElementById('updatedSongFile').innerHTML = `File Added :`
  }
  button.onclick = () => {
    input.click();
  };
  input.addEventListener("change", function (e) {
    var fileName = e.target.files[0].name;
    let filedata = `
    <h4> File Added : ${fileName}</h4>`;
    dropArea2.innerHTML = filedata;
  });
 const getAllGenre=async()=>{
     await fetch('/genre').then(response => {
      if (response.ok) {
        return response.json()
      }
    }).then((data) => {
      if (data.genre) {
        genre = data.genre.genres;
      }
    }).catch((error) => {
      console.error(error)
    });
   document.getElementById("genre").innerHTML = `<option value="">--Select Genre--</option>`
   document.getElementById("subgenre").innerHTML = `<option value="">--Select SubGenre--</option>`
   for(let i = 0;i<genre.length;i++){
      document.getElementById("genre").innerHTML += `<option value="${genre[i].name}">${genre[i].name}</option>`
   }
}
function updateSubgenre(){
   document.getElementById("subgenre").innerHTML = `<option value="">--Select SubGenre--</option>`
   for(let i = 0;i<genre.length;i++){
     if(genre[i].name == $('select[name="genre"]').children("option:selected").val()){
      document.getElementById("subgenre").innerHTML = `<option value="">--Select SubGenre--</option>`
      for(let j = 0;j<genre[i].subgenres.length;j++)
      document.getElementById("subgenre").innerHTML += `<option value="${genre[i].subgenres[j]}">${genre[i].subgenres[j]}</option>`
      break
     }
   }
}
document.getElementById("genre").addEventListener('change',updateSubgenre())

 const getAllLabels=async()=>{
     await fetch('/label-manage/labels').then(response => {
      if (response.ok) {
        return response.json()
      }
    }).then((data) => {
      if (data.labelData) {
        labelArray = data.labelData;
      }
    }).catch((error) => {
      console.error(error)
    });
    document.getElementById("lable_name").innerHTML =`<option value="select_label">--Select Label--</option>`
   for(let i = 0;i<labelArray.length;i++){
      document.getElementById("lable_name").innerHTML += `<option value="${labelArray[i].title}">${labelArray[i].title}</option>`
   }
}
async function updateLabel(labelName){
    await getAllLabels()
    for(let i=0;i<labelArray.length;i++){
        if(labelArray[i].title == labelName){
            document.getElementById("lable_name").options[i+1].selected = true;
            break
        }
    }
}
async function updateGenreAndSubgenre(genrename,subGenreName){
    await getAllGenre()
    for(let i=0;i<genre.length;i++){
        if(genre[i].name == genrename){
            document.getElementById("genre").options[i+1].selected = true;
            updateSubgenre()
            for(let j =0;j<genre[i].subgenres.length;j++){
                if(genre[i].subgenres[j] == subGenreName){
                     document.getElementById("subgenre").options[j+1].selected = true;
                     break
                }
            }
            break
        }
    }
}
const getSongsWithAlbumID =async(albumID)=>{
  await fetch(`/album-song/${albumID}`).then(response => {
      if (response.ok) {
        return response.json()
      }
    }).then(async (data) => {
      if (data.songs) {
        songsArray = data.songs;
        updateTable(true)
      }
    }).catch((error) => {
      console.error(error)
    });
}
function updateFormatAndYear(format,year){
    if(format == "Single"){
       document.getElementById("format").options[1].selected = true;
    }else{
    document.getElementById("format").options[2].selected = true;
    }
   productionYearsArray =["2023","2022","2021","2020","2019","2018","2017","2016"]
   for(let i=0;i<productionYearsArray.length;i++){
    if(productionYearsArray[i]==year){
    document.getElementById("production_year").options[i+1].selected = true;
    }
   }
}
async function updateAlbumDataBeforeEditing(draft){
    savedAlbum = {
        id : draft.id,
        title: draft.title 
    }
    isAlbumSaved = true
    albumDataSaved = draft
    isSongsDataSaved = true
    document.getElementById("title").value = draft.title;
    document.getElementById("version").value = draft.subTitle;
    document.getElementById("primary_artist").value = draft.primaryArtist;
    document.getElementById("actor").value = draft.actor;
    updateLabel(draft.labelName)
    document.getElementById("producer_catalogue_number").value = draft.producerCatalogueNumber;
    updateGenreAndSubgenre(draft.genre,draft.subGenre)
    updateFormatAndYear(draft.format,draft.productionYear)
   
    document.getElementById("line1").value = draft.publisherCopyright;
    document.getElementById("line2").value = draft.copyright;

    document.getElementById("datepicker").value = draft.originalReleaseDate;
    showDraftImage(draft.imageUrl);
    getSongsWithAlbumID(savedAlbum.id)
    //document.getElementById('load1').style.display='none'; 
}

function editSongDataInFormToUpdate(idx){
  document.getElementById('songWriter').value = songsArray[idx].writer
  document.getElementById('songComposer').value = songsArray[idx].composer
  document.getElementById('songDirector').value = songsArray[idx].director
  document.getElementById('songProducer').value = songsArray[idx].producer
  document.getElementById('songISRC').value = songsArray[idx].isrc
  document.getElementById('songParent').value = songsArray[idx].parent
  document.getElementById('songLanguage').value = songsArray[idx].language
  document.getElementById('songLyrics').value = songsArray[idx].lyrics
  document.getElementById('songTiktok').value = songsArray[idx].tiktok
  document.getElementById('updatedSongFile').innerHTML = `Choosen Previously : ${songsArray[idx].filePath.name}`
  if(songsArray[idx].filePath.name === undefined){
  document.getElementById('updatedSongFile').innerHTML = `Choosen Previously : ${songsArray[idx].songName}`
  }
  document.getElementById('saveSongButton').onclick = (function(index) {
        return function() {
            updateSongData(index);
            updateTable(false)
        }
    })(idx);
}
function updateSongData(idx){
      let fileSelect = document.getElementById("songFile").files[0];
      songsArray[idx].filePath = fileSelect,
      songsArray[idx].writer = $(`input[name="writer"]`).val(),
      songsArray[idx].composer = $(`input[name="composer"]`).val(),
      songsArray[idx].director = $(`input[name="director"]`).val(),
      songsArray[idx].producer = $(`input[name="producer"]`).val(),
      songsArray[idx].isrc = $(`input[name="isrc"]`).val(),
      songsArray[idx].parent = $(`input[name="parent"]`).val(),
      songsArray[idx].language = $(`input[name="language"]`).val(),
      songsArray[idx].lyrics = $(`input[name="lyrics"]`).val(),
      songsArray[idx].tiktok = $(`input[name="tiktok"]`).val(),
      songsArray[idx].updated = true
}
  // <------------ model function end ---------->
  // <-------------Function for Album Only------>
const getAllDrafts=async(draftId)=>{
    //document.getElementById('load1').style.display='flex'; 
    await fetch(`/album-manage/${draftId}`).then(response => {
      if (response.ok) {
        return response.json()
      }
    }).then(async (data) => {
      if (data.album) {
        updateAlbumDataBeforeEditing(data.album[0])
        }
    }).catch((error) => {
      console.error(error)
    });
  }
  if("{{draftId}}"){
  getAllDrafts("{{ draftId }}");
  }else{
    
  }

  function getAndVerifyAlbumValues() {
    const albumImageObject = document.getElementById("albumImage").files[0]
    let albumValues = {
      title: $('input[name="title"]').val(),
      subTitle: $('input[name="version"]').val(),
      albumImage: albumImageObject,
      primaryArtist: $('input[name="primary_artist"]').val(),
      actor: $('input[name="actor"]').val(),
      genre: $('select[name="genre"]').children("option:selected").val(),
      subGenre: $('select[name="subgenre"]').children("option:selected").val(),
      labelID: $('select[name="lable_name"]').children("option:selected").val(),
      format: $('select[name="format"]').children("option:selected").val(),
      originalReleaseDate: $('input[name="physical_release_date"]').val(),
      productionYear: $('select[name="production_year"]').children("option:selected").val(),
      producerCatalogueNumber : $('input[name="producer_catalogue_number"]').val(),
      publisherCopyright :$('input[name="line1"]').val(),
      copyright : $('input[name="line2"]').val(),
      producerNumber : $('input[name="producer_catalogue_number"]').val(),
      publisherLine :$('input[name="line1"]').val(),
      copyrightLine : $('input[name="line2"]').val(),
    }
    albumDataSaved = albumValues
    return albumValues
  }
  const saveAlbumData = async (albumData) => {
    let savedAlbum = {}
    const formData = new FormData();
    for (const key in albumData) {
      formData.append(key, albumData[key]);
    }
    loader();
    await fetch('/album-manage/addAlbum', {
      method: 'POST',
      body: formData
    }).then(response => {
      if (response.ok) {
        return response.json()
      }
    }).then(async (data) => {
      if (data.album) {
         loader();
        savedAlbum = data.album;
      }
    }).catch((error) => {
      console.error(error)
      return savedAlbum
    });
    loader();
    return savedAlbum
  }
  const updateAlbumData = async (albumData,savedAlbumData)=> {
    const formData = new FormData();
    for (const key in albumData) {
      formData.append(key, albumData[key]);
    }
    formData.append("albumId", savedAlbumData.id);
    await fetch('/album-manage/updateAlbum', {
      method: 'POST',
      body: formData
    }).then(response => {
      if (response.ok) {
        return response.json()
      }
    }).then(async (data) => {
      
    }).catch((error) => {
      console.error(error)
    });
  }
  // <-------------Function for Album Only End------>

  function addSongInArray() {
    let fileSelect = document.getElementById("songFile").files[0];
    let song = {
      albumID: savedAlbum.id,
      title: savedAlbum.title,
      filePath: fileSelect,
      songIDInDB: 0,
      updated: false,
      writer: $(`input[name="writer"]`).val(),
      composer: $(`input[name="composer"]`).val(),
      director: $(`input[name="director"]`).val(),
      producer: $(`input[name="producer"]`).val(),
      isrc: $(`input[name="isrc"]`).val(),
      parent: $(`input[name="parent"]`).val(),
      language: $(`input[name="language"]`).val(),
      lyrics: $(`input[name="lyrics"]`).val(),
      tiktok: $(`input[name="tiktok"]`).val(),
    }
    songsArray.push(song);
    updateTable(false)
  }
  const updateSongInDB = async(idx)=>{
    const formData = new FormData();
    for (const key in songsArray[idx]) {
        formData.append(key, songsArray[idx][key]);
    }
    await fetch('/album-manage/updateSong', {
    method: 'POST',
    body: formData
    }).then(response => {
     if (response.ok) {
        return response.json()
      }
    }).then(()=> {
      songsArray[idx].updated = false
      
    }).catch((error) => {
      console.error(error)
    });
  }
  const saveSongsData = async (savedAlbumData) => {
    for(let i=0;i<songsArray.length;i++){
    if(songsArray[i].updated) {
      await updateSongInDB(i)
      isSongsDataSaved = true
      continue
    }
    if(songsArray[i].songIDInDB != 0 ) continue
    const formData = new FormData();
    for (const key in songsArray[i]) {
        formData.append(key, songsArray[i][key]);
    }
    await fetch('/album-manage/addSong', {
    method: 'POST',
    body: formData
    }).then(response => {
     if (response.ok) {
        return response.json()
      }
    }).then(data => {
      songsArray[i].songIDInDB = data.songID
    }).catch((error) => {
      console.error(error)
    });
    }
    let savedSongsID =[]
    for(let i=0;i<songsArray.length;i++){
    if( songsArray[i].songIDInDB != 0)
     {
      savedSongsID.push(songsArray[i].songIDInDB)
      continue
     }
    else
       return 
    }
    const formData = new FormData();
    formData.append("songs",JSON.stringify(savedSongsID))
    formData.append("albumID",savedAlbum.id)
    await fetch('/album-manage/updateSongArray', {
    method: 'POST',
    body: formData
    }).then(response => {
     if (response.ok) {
        return response.json()
      }
    }).then(data => {
      isSongsDataSaved = true
    }).catch((error) => {
      console.error(error)
    });
  }
  const getClickStoreID =() =>{
    let clickStoresID = []
    for(let i=0;i<stores.length;i++){
      if(document.getElementById(`store-${i}`).checked){
        clickStoresID.push(stores[i].id)
      }
    }
    return clickStoresID
  }
  const saveStoresForSavedAlbum = async(clickedStores)=>{
    let isStoreSaved = false
    const formData = new FormData();
    formData.append("stores",JSON.stringify(clickedStores))
    formData.append("albumID",savedAlbum.id)
    await fetch('/album-manage/updateStoresArray', {
    method: 'POST',
    body: formData
    }).then(response => {
     if (response.ok) {
        return response.json()
      }
    }).then(data => {
       isStoreSaved = true
    }).catch((error) => {
      console.error(error)
      isStoreSaved = false
    });
    return isStoreSaved
  }
  function saveCompletedAlbum(){
    const formData = new FormData();
    formData.append("albumID",savedAlbum.id)
    fetch(`/album-manage/completed`, {
    method: 'POST',
    body: formData
    }).then(response => {
     if (response.ok) {
        return response.json()
      }
    }).then(() => {
       window.location.href ="/"
    }).catch((error) => {
      console.error(error)
    });
  }
  const navigateToFormStep = async (stepNumber) => {
    if (stepNumber == 2 && nextBtnClicked ) {
      nextBtnClicked = false
      loader();
      document.getElementById("next-1").disabled = true;
      albumData = getAndVerifyAlbumValues()
      let missingData = false
      if(sizeLimitExceed){
        loader();
        document.getElementById("next-1").disabled = false;
        return
      }
      let text = `<p class ="err">Missing Fields :`
      for (const key in albumData) {
        if (albumData[key] == ""  ) {
          text = text + `${key}, `
          missingData = true
        }
      }
      if (missingData) {
        document.getElementById("errorShow").innerHTML = text + `<p>`
        loader();
        document.getElementById("next-1").disabled = false;
        return
      } else {
        document.getElementById("errorShow").innerHTML = ``
      }
      if(isAlbumSaved == false){
        savedAlbum = await saveAlbumData(albumData)
      }
      else{
         updateAlbumData(albumData,savedAlbum)
      }
      if (Object.keys(savedAlbum).length === 0) {
        
        loader();
        document.getElementById("next-1").disabled = false;
        return
      } else {
        document.getElementById("errorShow").innerHTML = ``
        isAlbumSaved = true
      }
      loader();
      document.getElementById("next-1").disabled = false;
    }

    // checking for second page
    if (stepNumber == 3 && nextBtnClicked && Object.keys(savedAlbum).length != 0 ) {
      nextBtnClicked = false
      loader()
      document.getElementById("next-2").disabled = true;
      await saveSongsData(savedAlbum) 
      if(!isSongsDataSaved) {
          document.getElementById("errorShow").innerHTML = `An Error Occure While Saving Assets`
          loader();
          document.getElementById("next-2").disabled = false;
          return
      }
      loader();
      document.getElementById("next-2").disabled = false;
    }
    if(stepNumber == 4 && nextBtnClicked && Object.keys(savedAlbum).length != 0 ){
      nextBtnClicked = false
      loader();
      document.getElementById("next-3").disabled = true;
      clickedStore = getClickStoreID()
      savedStore = await saveStoresForSavedAlbum(clickedStore)
      if(!savedStore){
          loader();
          document.getElementById("next-3").disabled = false;
          return
      }
      loader();
      document.getElementById("next-3").disabled = false;
    }
    if(Object.keys(savedAlbum).length!=0){
    preview()
    } 
    document.querySelectorAll(".form-step").forEach((formStepElement) => {
      formStepElement.classList.add("d-none");
    });
    document.querySelectorAll(".form-stepper-list").forEach((formStepHeader) => {
      formStepHeader.classList.add("form-stepper-unfinished");
      formStepHeader.classList.remove("form-stepper-active", "form-stepper-completed");
    });

    document.querySelector("#step-" + stepNumber).classList.remove("d-none");

    const formStepCircle = document.querySelector('li[step="' + stepNumber + '"]');

    formStepCircle.classList.remove("form-stepper-unfinished", "form-stepper-completed");
    formStepCircle.classList.add("form-stepper-active");

    for (let index = 0; index < stepNumber; index++) {

      const formStepCircle = document.querySelector('li[step="' + index + '"]');

      if (formStepCircle) {

        formStepCircle.classList.remove("form-stepper-unfinished", "form-stepper-active");
        formStepCircle.classList.add("form-stepper-completed");
      }
    }
  };
  document.querySelectorAll(".btn-navigate-form-step").forEach((formNavigationBtn) => {
    formNavigationBtn.addEventListener("click", () => {
      const stepNumber = parseInt(formNavigationBtn.getAttribute("step_number"));
      navigateToFormStep(stepNumber);
    });
  });

  //script for image Uploader
  function upload() {
    let imgcanvas = document.getElementById("canv1");
    let fileinput = document.getElementById("albumImage");
    if(fileinput.files[0].size > 10**10241024){
      document.getElementById("imgError").innerHTML =  `image is too large`
      sizeLimitExceed = true
    }else{
      document.getElementById("imgError").innerHTML =``
      sizeLimitExceed = false
    }
    let image = new SimpleImage(fileinput);
    image.drawTo(imgcanvas);
    showCanvas()
  }
  function priviewimg() {
    var imgcanvas2 = document.getElementById("canv2");
    var fileinput;
    if( document.getElementById("canv1").style.display=='none'){
      fileinput = document.getElementById("draftimage");
    }
    else{
      fileinput = document.getElementById("albumImage")
    }
    var image = new SimpleImage(fileinput);
    image.drawTo(imgcanvas2);
  }

  //for company selection
  function getCheckboxValue() {
    var lang1 = document.getElementById("s1");
    var lang2 = document.getElementById("s2");
    var result = " ";
    if (lang1.checked == true) {
      var lg1 = document.getElementById("s1").value;
      result += lg1 + " ";
    }
    if (lang2.checked == true) {
      var lg2 = document.getElementById("s2").value;
      result += lg2 + " ";
    }
    return document.getElementById("result").innerHTML = "You have selected " + result + " Companies to Release";
  }
  function selects() {
    var ele = document.getElementsByClassName('lg');
    for (var i = 0; i < ele.length; i++) {
      if (ele[i].type == 'checkbox')
        ele[i].checked = true;
    }
  }
  function deSelect() {
    var ele = document.getElementsByClassName('lg');
    for (var i = 0; i < ele.length; i++) {
      if (ele[i].type == 'checkbox')
        ele[i].checked = false;
    }
  }
  
  function preview() {
    document.getElementById('previewData').innerHTML = ` 
            <div class="container">
              <div class="item">
                <p style="width: 195px;">
                   Album Thumbnail:
                </p>
                <canvas id="canv2"></canvas>
              </div>
              <div class="item">
                <label for="">Name</label>
                <input value = ${albumDataSaved.title}  readonly autocomplete="on" placeholder="ABC Track" type="" name="title" oninput="this.className = ''">
                <label>Version/Subtitle </label><input  readonly autocomplete="on" placeholder="Version/Subtitle" type="version_subtitle"
                  name="version" oninput="this.className = ''" value = ${albumDataSaved.subTitle}>
                <label>Primary Artist </label><input value = ${albumDataSaved.primaryArtist} readonly  autocomplete="on" placeholder="" type="" name="primary_artist"
                  oninput="this.className = ''">
                <p>
              </div>
            </div>
            <div class="container">
              <div class="text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b dark:border-gray-700 bg-gray-50 dark:text-gray-400 dark:bg-gray-800 belowLine ">
                <div class="selectionInput">
                <label style="margin-right: 42px;" for="pet-select">Genre </label>
                <input value = ${albumDataSaved.genre} disabled name="genre" id="pet-select">
                </input>
                </div>
                <div class="selectionInput">
                <label for="pet-select" style="margin-right: 23px;">SubGenre </label>
                <input  disabled name="subgenre" id="pet-select" value = ${albumDataSaved.subGenre}>
                </input>
                </div>
                <div class="selectionInput">
                <label for="pet-select">Lable Name </label>
                <input value = ${albumDataSaved.labelName} disabled name="lable_name" id="pet-select">
                </input> 
                </div>
                <div class="selectionInput">
                <label for="pet-select" style="margin-right: 35px;">Format </label>
                <input value = ${albumDataSaved.format} disabled name="format" id="pet-select" >
                </input>
                </div>
                <div class="selectionInput">
                <label for="pet-select">Production Year </label>
                <input value = ${albumDataSaved.productionYear} disabled name="production_year" id="pet-select">
                </input> 
                </div>
                 <label>Actor </label><input   readonly autocomplete="on" style="margin-bottom: 29px;" placeholder="Featuring" type="" name="actor"
                  oninput="this.className = ''" value = ${albumDataSaved.actor}>
              </div>
              <div class="item ">
                <label>Producer Catalogue Number </label>
                <input value = ${albumDataSaved.producerCatalogueNumber} readonly autocomplete="on" placeholder="Producer Catalogue Number" type="" name="producer_catalogue_number"
                  oninput="this.className = ''">
                <label>Phisical/Original release date </label><input value = ${albumDataSaved.originalReleaseDate} readonly id ="datepicker"
                  placeholder="Version/Subtitle" type="date" name="physical_release_date" oninput="this.className = ''">
                <label>Line1&#8471; </label><input value = "${albumDataSaved.publisherCopyright}" readonly autocomplete="on" placeholder="Line" type="" name="line1"
                  oninput="this.className = ''">
                <label>Line2&#169; </label><input value = ${albumDataSaved.copyright} readonly  autocomplete="on" placeholder="Line" type="" name="line2"
                  oninput="this.className = ''">
                <label>UPC/EAN </label><input value = "fill by admin" readonly autocomplete="on" placeholder="UPC/EAN" type="" name="upc"
                  oninput="this.className = ''">
              </div>
            </div>`
    priviewimg();
    document.getElementById('previewTableRows').innerHTML =``
    for (let i = 0; i < songsArray.length; i++) {
      if(songsArray[i].songIDInDB == 0) continue
          songsArray[i].songName = songsArray[i].filePath.name
          if(songsArray[i].songName === undefined){
            let  filename = songsArray[i].filePath.split("/")
            songsArray[i].songName = filename[filename.length-1]
          }
          document.getElementById('previewTableRows').innerHTML += `
          <tr id="row${i}" class="text-gray-700 dark:text-gray-400">
                  <td class="px-4 py-3">
                      ${i + 1}
                  </td>
                  <td class="px-4 py-3 text-sm">
                    ${songsArray[i].writer}
                  </td>
                  <td class="px-4 py-3 text-sm">
                    ${songsArray[i].language}
                  </td>
                  <td class="px-4 py-3 text-sm">
                    ${songsArray[i].songName}
                  </td>`
      }

  }

  // Updating the table
  function updateTable(isSongFetchedThroughAPI) {
    document.getElementById('myTable').innerHTML = `
    <table class="w-full whitespace-no-wrap">
          <thead>
            <tr
              class="header text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b dark:border-gray-700 bg-gray-50 dark:text-gray-400 dark:bg-gray-800">
              <th class="px-4 py-3">Id</th>
              <th class="px-4 py-3">Writer</th>
              <th class="px-4 py-3">Language</th>
              <th class="px-4 py-3">File Name</th>
              <th class="px-4 py-3">Action</th>
            </tr>
          </thead>
          <tbody id="myTableTableRow" class="bg-white divide-y dark:divide-gray-700 dark:bg-gray-800">
            
          </tbody>
        </table>
    `;
    for (let i = 0; i < songsArray.length; i++) {
      songsArray[i].songName = songsArray[i].filePath.name
      if(songsArray[i].songName === undefined){
         let  filename = songsArray[i].filePath.split("/")
         songsArray[i].songName = filename[filename.length-1]
      }
      document.getElementById('myTableTableRow').innerHTML += `
       <tr id="row${i}" class="text-gray-700 dark:text-gray-400">
              <td class="px-4 py-3">
                   ${i + 1}
              </td>
              <td class="px-4 py-3 text-sm">
                ${songsArray[i].writer}
              </td>
              <td class="px-4 py-3 text-sm">
                ${songsArray[i].language}
              </td>
              <td class="px-4 py-3 text-sm" id="file-${i}" >
                ${songsArray[i].songName}
              </td>
              <td class="px-4 py-3">
              <div class="ActionDiv flex items-center space-x-4 text-sm">
               <button
                    id="${i}"
                    onclick="editSongDataInFormToUpdate(${i})"
                    @click="openModal"
                    class="flex items-center justify-between px-2 py-2 text-sm font-medium leading-5 text-purple-600 rounded-lg dark:text-gray-400 focus:outline-none focus:shadow-outline-gray"
                    aria-label="Edit">
                    <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
                      <path
                        d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z">
                      </path>
                    </svg>
               </button> 
                <button  onclick="deleteSongFromTable(${i})"
                    class="flex items-center justify-between px-2 py-2 text-sm font-medium leading-5 text-purple-600 rounded-lg dark:text-gray-400 focus:outline-none focus:shadow-outline-gray"
                    aria-Artist="Delete">
                    <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd"
                        d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                        clip-rule="evenodd"></path>
                    </svg>
                  </button>
               </td>`
    }
  }

  const deleteSongFromTable = async(idx)=>{
    fetch(`/song-manage/${songsArray[idx].id}`, {
    method: 'DELETE'
    })
    .then(response => response.json())
    .then(data => {
      songsArray.splice(idx, 1);
      updateTable(false)
    }).catch(error => console.error(error));
}
// option selection

var getAllStores=async()=>{
  await fetch('/albumStores').then(response => {
      if (response.ok) {
        return response.json()
      }
    }).then((data) => {
      if (data.stores) {
        stores = data.stores;
        
        document.getElementById("storesIcon").innerHTML =``
        for(let i = 0;i<stores.length;i++){
        document.getElementById("storesIcon").innerHTML += `
                        <div class="grid-item"> <img class ="store-image"
                          src="${stores[i].img}"
                          alt="${stores[i].name}">
                        <input  type="checkbox" id="store-${i}" class ="store-input" value="${stores[i].name}">
                      </div>`
        }
      }
    }).catch((error) => {
      console.error(error)
  });
}


getAllStores()

// disable three more days in calender
let today = new Date();
// Add 3 days to today's date
var disableUntil = new Date();
disableUntil.setDate(today.getDate() + 4);
// Set the min attribute of the datepicker to the date 3 days from now
document.getElementById("datepicker").min = disableUntil.toISOString().slice(0,10);

function showDraftImage(url){
document.getElementById('draftimage').src = '.'+url;
document.getElementById('draftimage').style = 'margin-top:10px;margin-bottom:10px;display:block;height:140px;width:140px;border:solid;';
document.getElementById('canv1').style.display = 'none';
}
function showCanvas(){
  document.getElementById('draftimage').style.display = 'none';
  document.getElementById('canv1').style.display = 'block';
}


function loader() {
  var x = document.getElementById("load");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
function selects() {
      for (var i = 0; i < stores.length; i++) {
       var ele = document.getElementById(`store-${i}`);
        if (ele.type == 'checkbox')
          ele.checked = true;
      }
    }
loader();
</script>