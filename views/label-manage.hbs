<main class="h-full pb-16 overflow-y-auto">
  <style>
    #myInput {
      background-image: url('/css/searchicon.png');
      background-position: 10px 10px;
      background-repeat: no-repeat;
      width: 100%;
      font-size: 16px;
      padding: 12px 20px 12px 40px;
      border: 1px solid #ddd;
      margin-bottom: 12px;
    }

    .container2 {
      position: relative;
      height: max-content;
      width: 100%;
      align-items: center;
      display: flex;
      justify-content: center;
      background-color: #fcfcfc;
    }

    .card {
      border-radius: 10px;
      box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.3);
      width: 100%;
      height: 100%;
      background-color: #ffffff;
      padding: 10px 30px 40px;
    }

    .card h3 {
      font-size: 22px;
      font-weight: 600;

    }

    .drop_box {
      margin: 10px 0;
      padding: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      border: 3px dotted #a3a3a3;
      border-radius: 5px;
    }

    .drop_box h4 {
      font-size: 16px;
      font-weight: 400;
      color: #2e2e2e;
    }

    .drop_box p {
      margin-top: 10px;
      margin-bottom: 20px;
      font-size: 12px;
      color: #a3a3a3;
    }

    .btn {
      text-decoration: none;
      background-color: #005af0;
      color: #ffffff;
      padding: 10px 20px;
      border: none;
      outline: none;
      transition: 0.3s;
    }

    .btn:hover {
      text-decoration: none;
      background-color: #ffffff;
      color: #005af0;
      padding: 10px 20px;
      border: none;
      outline: 1px solid #010101;
    }

    .form input {
      margin: 10px 0;
      width: 100%;
      background-color: #e2e2e2;
      border: none;
      outline: none;
      padding: 12px 20px;
      border-radius: 4px;
    }
    .error{
      color:red
    }
  </style>
  <div class="container px-6 mx-auto grid">
    <button @click="openModal"
      onclick ="updateSaveLabelButton()"
      class="px-4 py-2  leading-5 text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg  focus:outline-none focus:shadow-outline-purple my-6 text-xl font-semibold ">
      Add Label +
    </button>
    <h4 class="text-lg font-semibold text-gray-600 dark:text-gray-300 py-2">
      Labels
    </h4>

    <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search for Title.." title="Type in a name">

    <div class="w-full overflow-hidden rounded-lg shadow-xs">
      <div class="w-full overflow-x-auto">
        <table class="w-full whitespace-no-wrap" id="myTable">
          <thead>
            <tr
              class="text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b dark:border-gray-700 bg-gray-50 dark:text-gray-400 dark:bg-gray-800">
              <th class="px-4 py-3">Title</th>
              <th class="px-4 py-3">YouTube</th>
              <th class="px-4 py-3">Status</th>
              <th class="px-4 py-3">Actions</th>
            </tr>
          </thead>
          <tbody  id = "tableOfLabels" class="bg-white divide-y dark:divide-gray-700 dark:bg-gray-800">
          
          </tbody>
        </table>
        {{#if errorMessage}}
            <span
                  class="px-2 py-1 font-semibold leading-tight text-orange-700 bg-orange-100 rounded-full dark:text-white dark:bg-orange-600">
                  {{errorMessage}}
                </span>
            {{/if}}
      </div>
</main>
<div x-show="isModalOpen" x-transition:enter="transition ease-out duration-150" x-transition:enter-start="opacity-0"
  x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-150"
  x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0"
  class="fixed inset-0 z-30 flex items-end bg-black bg-opacity-50 sm:items-center sm:justify-center">
  <!-- Modal -->
  <div x-show="isModalOpen" x-transition:enter="transition ease-out duration-150"
    x-transition:enter-start="opacity-0 transform translate-y-1/2" x-transition:enter-end="opacity-100"
    x-transition:leave="transition ease-in duration-150" x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0  transform translate-y-1/2" @click.away="closeModal" @keydown.escape="closeModal"
    class="w-full px-6 py-4 overflow-hidden bg-white rounded-t-lg dark:bg-gray-800 sm:rounded-lg sm:m-4 sm:max-w-xl"
    role="dialog" id="modal">
    <!-- Remove header if you don't want a close icon. Use modal body to place modal tile. -->
    <header class="flex justify-end">
      <button
        class="inline-flex items-center justify-center w-6 h-6 text-gray-400 transition-colors duration-150 rounded dark:hover:text-gray-200 hover: hover:text-gray-700"
        aria-label="close" @click="closeModal">
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" role="img" aria-hidden="true">
          <path
            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
            clip-rule="evenodd" fill-rule="evenodd"></path>
        </svg>
      </button>
    </header>
    <!-- Modal body -->
    <div class="mt-4 mb-6">
      <h2 class="error" id ="errorModel"></h2>
      <!-- Modal title -->
      <h1 @click="closeModal" id ="closesModal" hidden></h1>
      <p id="addLabel" class="font-semibold text-gray-700 dark:text-gray-300 my-6 text-xl font-semibold">
        Add Label
      </p>
      <!-- Modal description -->
      <div class="container2">
        <div class="card">
            <label class="block text-sm">
              <span class="text-gray-700 dark:text-gray-400 my-6">Title</span>
              <input name="title"
                id ="title"
                class="block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
                placeholder="Arijit" required />
            </label>
            <label class="block text-sm">
              <span class="text-gray-700 dark:text-gray-400 my-6">Youtube URL</span>
              <input name="youtube"
                id ="youtube"
                class="block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
                placeholder="https://youtube.com" required />
            </label>

            <label class="text-gray-700 dark:text-gray-400">Upload NDA</label>
            <div class="drop_box">
              <header>
                <h4>Select File here</h4>
              </header>
              <p>Files Supported: PDF, TEXT, DOC , DOCX</p>
              <input required name="nda" type="file" class="form-control" hidden accept=".doc,.docx,.pdf" id="fileID" style="display:none;">
              <button class="btn" type="button" >Choose File</button>
            </div>
            <div id = "recentFile" class="recent-file"></div>
            <div><a href="#" style="color:blue;">Download NDA Demo File</a></div>
        </div>
      </div>
    </div>
     <div style="display:flex;justify-content:space-between">
       <button @click="closeModal"
      class="w-full px-5 py-3 text-sm font-medium leading-5 text-white text-gray-700 transition-colors duration-150 border border-gray-300 rounded-lg dark:text-gray-400 sm:px-4 sm:py-2 sm:w-auto active:bg-transparent hover:border-gray-500 focus:border-gray-500 active:text-gray-500 focus:outline-none focus:shadow-outline-gray">
      Cancel
    </button>
    <button
      id = "saveLabelButton"
      class="w-full px-5 py-3 text-sm font-medium leading-5 text-white text-gray-700 transition-colors duration-150 border border-gray-300 rounded-lg dark:text-gray-400 sm:px-4 sm:py-2 sm:w-auto active:bg-transparent hover:border-gray-500 focus:border-gray-500 active:text-gray-500 focus:outline-none focus:shadow-outline-gray">
      Save Label
    </button>
     </div>
  </div>
</div>
<script>
const dropArea = document.querySelector(".drop_box")
const dropArea2 = document.querySelector(".recent-file"),
button = dropArea.querySelector("button"),
dragText = dropArea.querySelector("header"),
input = dropArea.querySelector("input");
let file;
var filename;

button.onclick = () => {
  input.click();
};

input.addEventListener("change", function (e) {
  var fileName = e.target.files[0].name;
  let filedata = `
    <h4> File Added : ${fileName}</h4>`;
  dropArea2.innerHTML = filedata;
});
  function myFunction() {
    var input, filter, table, tr, td, i, txtValue;
    input = document.getElementById("myInput");
    filter = input.value.toUpperCase();
    table = document.getElementById("myTable");
    tr = table.getElementsByTagName("tr");
    for (i = 0; i < tr.length; i++) {
      td = tr[i].getElementsByTagName("td")[0];
      if (td) {
        txtValue = td.textContent || td.innerText;
        if (txtValue.toUpperCase().indexOf(filter) > -1) {
          tr[i].style.display = "";
        } else {
          tr[i].style.display = "none";
        }
      }
    }
  }
</script>
<!-- End of modal backdrop -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
<script>
  let labelArray = []
  function clearForm(){
    document.getElementById("youtube").value = ""
    document.getElementById("title").value = ""
    document.getElementById("fileID").value = ""
  }
  function updateSaveLabelButton(){
    document.getElementById("addLabel").innerHTML = `Add Label`
    document.getElementById("saveLabelButton").disabled = false
    document.getElementById("saveLabelButton").onclick = saveLabel
    clearForm()
  }
  function searchLabel(title){
    for(let i=0;i<labelArray.length;i++){
      if(title == labelArray[i].title) return true
    }
    return false
  }
  function saveLabel () {
    document.getElementById("saveLabelButton").disabled = true
    let fileSelect = document.getElementById("fileID").files[0];
    const label = {
      youtubeLink :  $(`input[name="youtube"]`).val(),
      title:     $(`input[name="title"]`).val(),
    }
    if(searchLabel(label.title)){
      document.getElementById("errorModel").innerHTML = `Label With Title ${label.title} Allready Exist`
      document.getElementById("saveLabelButton").disabled = false
      return
    }
    const formData = new FormData();
    formData.append("youtube",label.youtubeLink);
    formData.append("title",label.title);
    formData.append("nda",fileSelect);
    if(youtube == "" || title == "" || fileSelect === undefined){
        document.getElementById("errorModel").innerHTML =`Please Fill All Details `
        document.getElementById("saveLabelButton").disabled = false
        return
    }else{
      document.getElementById("errorModel").innerHTML = ``
    }
    fetch('/label-manage', {
    method: 'POST',
    body: formData
    }).then((response)=>{
        if(response.ok){
          return response.json()
        }
    }).then((data) => {
      label.id = data.id
      labelArray.push(label)
      updateTableData()
      console.log("label added successfully")
      document.getElementById("closesModal").click()
    }).catch((error) => {
      document.getElementById("errorModel").innerHTML =`error saving label ${title}`
      console.error(error)
    });
  }
  function updateTableData(){
   labelArray.sort(function(a, b) {
      return a.id - b.id;
   });
   document.getElementById("tableOfLabels").innerHTML=``
   for (let i = 0; i < labelArray.length; i++) {
        document.getElementById("tableOfLabels").innerHTML += `
            <tr class="text-gray-700 dark:text-gray-400">
              <td class="px-4 py-3">
               ${labelArray[i].title}
              </td>
              <td class="px-4 py-3">
                ${labelArray[i].youtubeLink}
              </td>
              <td class="px-4 py-3 text-xs" id ="approvedText">
                 <span 
                  class="px-2 py-1 font-semibold leading-tight text-orange-700 bg-orange-100 rounded-full dark:text-white dark:bg-orange-600">
                  Pending
                </span>
                 </td>
                <td class="px-4 py-3">
                <div class="flex items-center space-x-4 text-sm">
                  <button @click="openModal"
                    onclick = "updateLabelData(${i})"
                    class="flex items-center justify-between px-2 py-2 text-sm font-medium leading-5 text-purple-600 rounded-lg dark:text-gray-400 focus:outline-none focus:shadow-outline-gray"
                    aria-label="Edit">
                    <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
                      <path
                        d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z">
                      </path>
                    </svg>
                  </button>
                  <button
                    onclick = "deleteLabel(${i})"
                    class="flex items-center justify-between px-2 py-2 text-sm font-medium leading-5 text-purple-600 rounded-lg dark:text-gray-400 focus:outline-none focus:shadow-outline-gray"
                    aria-label="Delete">
                    <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd"
                        d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                        clip-rule="evenodd"></path>
                    </svg>
                  </button>
                  </div>
                  </td>
                </tr>`
          if(labelArray[i].approved){
            document.getElementById("approvedText").innerHTML = `<span
                  class="px-2 py-1 font-semibold leading-tight text-green-700 bg-green-100 rounded-full dark:bg-green-700 dark:text-green-100">
                  Approved
                </span>`
          }
        }
  }
  const getAllLabels=async()=>{
     await fetch('/label-manage/labels').then(response => {
      if (response.ok) {
        return response.json()
      }
    }).then(async (data) => {
      if (data.labelData) {
        labelArray = data.labelData;
        updateTableData()
        console.log("response data", labelArray)
      }
    }).catch((error) => {
      console.error(error)
    });
  }
  const deleteLabel = async(idx)=>{
    console.log("deleting label :",labelArray[idx].name)
    fetch(`/label-manage/${labelArray[idx].id}`, {
    method: 'DELETE'
    })
    .then(response => response.json())
    .then(data => {
      updateTableData()
      console.log("after delete",data);
    }).catch(error => console.error(error));
    labelArray.splice(idx, 1);
    updateTableData()
  }
  const updateLabel=async(idx)=>{
      document.getElementById("saveLabelButton").disabled = true
      let fileSelect = document.getElementById("fileID").files[0];
      labelArray[idx].youtubeLink = $(`input[name="youtube"]`).val(),
      labelArray[idx].title = $(`input[name="title"]`).val()
      if(fileSelect != undefined){
         labelArray[idx].filename = fileSelect
      }
      youtube = $(`input[name="youtube"]`).val()
      title = $(`input[name="title"]`).val()
      if(youtube == "" || title == "" || fileSelect === undefined){
        document.getElementById("errorModel").innerHTML =`Please Fill All Details `
        document.getElementById("saveLabelButton").disabled = false
        return
      }else{
        document.getElementById("errorModel").innerHTML = ``
      }
      const formData = new FormData();
      formData.append("id",labelArray[idx].id);
      formData.append("title",title);
      formData.append("youtubeLink",youtube);
      formData.append("nda",fileSelect);
      
      await fetch('/label-manage/update', {
      method: 'POST',
      body: formData
      }).then(response => response.json()).then(data => {
        updateTableData()
        document.getElementById("closesModal").click()
        console.log("label updated successfully")
      }).catch((error) => {
        document.getElementById("errorModel").innerHTML =`Please Fill All Details`
        console.error(error)
      });
  }
  
  function updateLabelData(idx){
    document.getElementById("saveLabelButton").disabled = false
    document.getElementById("addLabel").innerHTML = `Edit Label`
    document.getElementById("youtube").value = labelArray[idx].youtubeLink
    document.getElementById("title").value = labelArray[idx].title
    document.getElementById("saveLabelButton").onclick =(function(index) {
        return function() {
            updateLabel(index);
        }
    })(idx);
  }

  function myFunction() {
    var input, filter, table, tr, td, i, txtValue;
    input = document.getElementById("myInput");
    filter = input.value.toUpperCase();
    table = document.getElementById("myTable");
    tr = table.getElementsByTagName("tr");
    for (i = 0; i < tr.length; i++) {
      td = tr[i].getElementsByTagName("td")[1];
      if (td) {
        txtValue = td.textContent || td.innerText;
        if (txtValue.toUpperCase().indexOf(filter) > -1) {
          tr[i].style.display = "";
        } else {
          tr[i].style.display = "none";
        }
      }
    }
  }
  getAllLabels()
 
</script>